--- devmem2.c	2017-12-12 14:47:46.933867494 +0100
+++ devmem2_fixed.c	2017-12-12 15:15:42.818814969 +0100
@@ -38,6 +38,7 @@
 #include <termios.h>
 #include <sys/types.h>
 #include <sys/mman.h>
+#include <stdint.h>
   
 #define FATAL do { fprintf(stderr, "Error at line %d, file %s (%d) [%s]\n", \
   __LINE__, __FILE__, errno, strerror(errno)); exit(1); } while(0)
@@ -50,7 +51,7 @@
 int main(int argc, char **argv) {
     int fd;
     void *map_base, *virt_addr; 
-	unsigned long read_result, write_val;
+	uint64_t read_result, write_val;
 	off_t target;
 	int access_type = 'w';
 	char fmt_str[128];
@@ -59,7 +60,7 @@
 	if(argc < 2) {
 		fprintf(stderr, "\nUsage:\t%s { address } [ type [ data ] ]\n"
 			"\taddress : memory address to act upon\n"
-			"\ttype    : access operation type : [b]yte, [h]alfword, [w]ord\n"
+			"\ttype    : access operation type : [b]yte, [h]alfword, [w]ord, [d]oubleword\n"
 			"\tdata    : data to be written\n\n",
 			argv[0]);
 		exit(1);
@@ -80,7 +81,7 @@
     printf("Memory mapped at address %p.\n", map_base); 
     fflush(stdout);
     
-    virt_addr = map_base + (target & MAP_MASK);
+    virt_addr = (char*)map_base + (target & MAP_MASK);
     switch(access_type) {
 		case 'b':
 			data_size = sizeof(unsigned char);
@@ -93,15 +94,20 @@
 			read_result = *((unsigned short *) virt_addr);
 			break;
 		case 'w':
-			data_size = sizeof(unsigned long);
+			data_size = sizeof(uint32_t);
 			virt_addr = fixup_addr(virt_addr, data_size);
-			read_result = *((unsigned long *) virt_addr);
+			read_result = *((uint32_t *) virt_addr);
+			break;
+	    case 'd':
+			data_size = sizeof(uint64_t);
+			virt_addr = fixup_addr(virt_addr, data_size);
+			read_result = *((uint64_t *) virt_addr);
 			break;
 		default:
 			fprintf(stderr, "Illegal data type '%c'.\n", access_type);
 			exit(2);
 	}
-	sprintf(fmt_str, "Read at address  0x%%08lX (%%p): 0x%%0%dlX\n", 2*data_size);
+	sprintf(fmt_str, "Read at address  0x%%08lX (%%p): 0x%%0%zulX\n", 2*data_size);
     printf(fmt_str, (unsigned long)target, virt_addr, read_result);
     fflush(stdout);
 
@@ -119,18 +125,23 @@
 				read_result = *((unsigned short *) virt_addr);
 				break;
 			case 'w':
-				virt_addr = fixup_addr(virt_addr, sizeof(unsigned long));
-				*((unsigned long *) virt_addr) = write_val;
-				read_result = *((unsigned long *) virt_addr);
+				virt_addr = fixup_addr(virt_addr, sizeof(uint32_t));
+				*((uint32_t *) virt_addr) = write_val;
+				read_result = *((uint32_t *) virt_addr);
+				break;
+			case 'd':
+				virt_addr = fixup_addr(virt_addr, sizeof(uint64_t));
+				*((uint64_t *) virt_addr) = write_val;
+				read_result = *((uint64_t *) virt_addr);
 				break;
 		}
-		sprintf(fmt_str, "Write at address 0x%%08lX (%%p): 0x%%0%dlX, "
-			"readback 0x%%0%dlX\n",	2*data_size, 2*data_size);
+		sprintf(fmt_str, "Write at address 0x%%08lX (%%p): 0x%%0%zulX, "
+			"readback 0x%%0%zulX\n",	2*data_size, 2*data_size);
 		printf(fmt_str, (unsigned long)target, virt_addr,
 			write_val, read_result);
 		fflush(stdout);
 	}
-	
+
 	if(munmap(map_base, MAP_SIZE) == -1) FATAL;
     close(fd);
     return 0;
